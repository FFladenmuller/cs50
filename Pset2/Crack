using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


namespace Crack
{
    class Program
    {
        static string[] alpha = {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n",
                    "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E","F",
                    "G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X", "Y", "Z"};
        static void Main(string[] args)
        {
            
                string hashedPW = getHash();
                DateTime initialTime = DateTime.Now;
                string encryptionsalt = hashedPW.Substring(0, 2);
                Console.WriteLine("Encrypted password is: " + hashedPW);
                string result = generatePassword(encryptionsalt, hashedPW);
                TimeSpan solveTime = DateTime.Now - initialTime;
                Console.WriteLine("Your password is: " +result);
                Console.WriteLine("It took me: {0} seconds to crack your password.", solveTime.Seconds.ToString());
                Console.ReadLine();
                Console.ReadLine();
            
        }
        static string getHash()
        {
            Console.WriteLine("Please enter a alphabetical password, 4 letters or less.");
            string result = Console.ReadLine();
            result = UnixCrypt.Crypt(result);
            return result; 
        }
        static string generatePassword(string salt, string hashedpw)
        {
            bool found = false;
            string result = "";
            for (int j = 0; j < 52; j++)
            {
                if (found) break;
                for (int k = 0; k < 52; k++)
                {
                    if (found) break;
                    for (int l = 0; l  < 52; l ++)
                    {
                        if (found) break;
                        for (int m = 0; m < 52; m++)
                        {
                            if (j == 0 && k == 0 && l == 0) { result = (checkPW(salt, alpha[m], hashedpw)) ? alpha[m] : result; }
                            else if (j == 0 && k == 0) { result = (checkPW(salt, alpha[l] + alpha[m], hashedpw)) ? alpha[l] + alpha[m] : result; }
                            else if (j == 0){ result = (checkPW(salt, alpha[k] + alpha[l] + alpha[m], hashedpw)) ? alpha[k] + alpha[l] + alpha[m] : result; }
                            else { result = (checkPW(salt, alpha[j] + alpha[k] + alpha[l] + alpha[m], hashedpw)) ? alpha[j] + alpha[k] + alpha[l] + alpha[m] : result; }
                            found = (result != "") ? true : false;
                            if (found) break;
                        }
                    }
                }
            }
            return result;
        }
        static bool checkPW(string salt, string generatedpassword, string hashedpw)
        {
            string crackedhash = UnixCrypt.Crypt(salt, generatedpassword);
            bool isPW = (crackedhash == hashedpw) ? true : false;
            return isPW;
        }
       
    }
}
