using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace Recover
{
    class Program
    {
        static void Main(string[] args)
        {
            string path = getForensicImagePath();
            List<byte> cardInfo = File.ReadAllBytes(path).ToList();
            recoverImages(cardInfo);
                
        }
        static string getForensicImagePath()
        {
            Console.WriteLine("Please enter a .raw file in your downloads folder to extract images from.");
            string result = Console.ReadLine();
            try
            {
                result = string.Format(@"C: \Users\frede\Downloads\{0}.raw", result);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
                result = getForensicImagePath();
            }
            return result;
        }
        static void recoverImages(List<byte> cardInfo)
        {
            var imageInfo = getImages(cardInfo);
            writeImages(imageInfo);
        }
        static string[] getHexValues(List<byte> info, int index)
        {
            byte[] b = new byte[3];
            if (index < info.Count - 3)
            {
                b = new byte[] { info[index], info[index + 1], info[index + 2] };
            }
            else
            {
                b[0] = 0; b[1] = 0; b[2] = 0;
            }
            string hexstring = BitConverter.ToString(b).ToLower();
            string[] values = hexstring.Split('-');
            return values;

        }
        static List<byte[]>getImages(List<byte> info)
        {
            List<byte[]> imageInfo = new List<byte[]>();
            int index = 0;
            while (index < info.Count)
            {
                var tempInfo = new List<byte>();
                tempInfo.AddRange(addImageData(index, info));
                index += tempInfo.Count;
                imageInfo.Add(tempInfo.ToArray());
            }
            return imageInfo;
        }
        static List<byte> addImageData(int index, List<byte> cardInfo)
        {
            bool newImage = false;
            List<byte> tempInfo = new List<byte>();
            tempInfo = cardInfo.GetRange(index, 3);
            index += 3; int counter = 0;
            while (!newImage && index < cardInfo.Count)
            {
                string[] values = getHexValues(cardInfo, index);
                newImage = (values[0] == "ff" && values[1] == "d8" && values[2] == "ff") ? true : false;
                if (newImage)
                {
                    break;
                }
                else
                {
                    int firstTimeCounter = (counter == 0) ? 509 : 512;
                    tempInfo.AddRange(cardInfo.GetRange(index, firstTimeCounter));
                    index += firstTimeCounter;
                }
                counter++;
            }
            return tempInfo;
        }
        static void writeImages(List<byte[]> imageInfo)
        {
            for (int i = 0; i < imageInfo.Count; i++)
            {
                string path = string.Format(@"C: \Users\frede\Pictures\{0}.jpeg", "jpeg" + i);
                File.WriteAllBytes(path, imageInfo[i]);
            }
        }
    }
}
