using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GameOfFifteen
{
    public class Player
    {
        public BoardChecks MoveChecker { get; set; }
        public Board GameBoard { get; set; }
        public int UnderScoreCoordinatesX { get; set; }
        public int UnderScoreCoordinatesY { get; set; }
        public int NumberCoordinatesX { get; set; }
        public int NumberCoordinatesY { get; set; }


        public void Move()
        {
            getUnderScoreCoordinates();
            Console.Clear();
            GameBoard.displayBoard();
            Console.WriteLine(moveDialogue());
            string number = getUserMove();
            getNumberCoordinates(number);
            if (MoveChecker.legalMove(number, GameBoard, UnderScoreCoordinatesX, UnderScoreCoordinatesY))
            {
                GameBoard.PuzzlePieces[UnderScoreCoordinatesX, UnderScoreCoordinatesY] = number;
                GameBoard.PuzzlePieces[NumberCoordinatesX, NumberCoordinatesY] = "_"; 
            }
            else
            {
                Console.WriteLine(invalidMoveDialogue());
                Console.ReadLine();
                Move();
            }
        }
        private string getUserMove()
        { 
            string number = Console.ReadLine();
            return number;
        }
        private string moveDialogue()
        {
            string result = "Tile to move?";
            return result; 
        }
        private string invalidMoveDialogue()
        {
            string result = "Invalid move. Please try again.";
            return result;
        }
        public int[] findUnderscoreCoordinates(Board board)
        {
            int[] underscoreCoordinates = new int[2];
            for (int y = 0; y < board.Dimensions; y++)
            {
                for (int x = 0; x < board.Dimensions; x++)
                {
                    if(board.PuzzlePieces[x, y] == "_")
                    {
                        underscoreCoordinates[0] = x;
                        underscoreCoordinates[1] = y;
                        break;
                    }
                }
                if (underscoreCoordinates[0] > 0) { break; }
            }
            UnderScoreCoordinatesX = underscoreCoordinates[0];
            UnderScoreCoordinatesY = underscoreCoordinates[1]; 
            return underscoreCoordinates;
        }
        private void getUnderScoreCoordinates()
        {
            int[] Coordinates = findUnderscoreCoordinates(GameBoard);
            UnderScoreCoordinatesX = Coordinates[0];
            UnderScoreCoordinatesY = Coordinates[1];
        }
        private int[] findNumberCoordinates(string number, Board board, int x, int y)
        {
            int[] coordinates = new int[2];
            if (x > 0 && number == board.PuzzlePieces[x - 1, y]){ coordinates[0] = x - 1; coordinates[1] = y; }
            else if (x < board.Dimensions - 1 && number == board.PuzzlePieces[x + 1, y]) { coordinates[0] = x + 1; coordinates[1] = y; }
            else if (y > 0 && number == board.PuzzlePieces[x , y - 1]){ coordinates[0] = x; coordinates[1] = y - 1; }
            else if (y < board.Dimensions - 1 && number == board.PuzzlePieces[x, y + 1]) { coordinates[0] = x; coordinates[1] = y + 1; }
            return coordinates;
        }
        private void getNumberCoordinates(string number)
        {
            int[] numberCoordinates = findNumberCoordinates(number, GameBoard, UnderScoreCoordinatesX, UnderScoreCoordinatesY);
            NumberCoordinatesX = numberCoordinates[0]; NumberCoordinatesY = numberCoordinates[1];
        }
    }
}
